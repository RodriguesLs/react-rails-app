[{"/app/src/App.tsx":"1","/app/src/index.tsx":"2","/app/src/components/header/header.component.tsx":"3","/app/src/components/tasks/tasks.component.jsx":"4","/app/src/components/tasks/list.component.jsx":"5","/app/src/components/tasks/create-task.component.jsx":"6","/app/src/reportWebVitals.ts":"7"},{"size":380,"mtime":1611707404345,"results":"8","hashOfConfig":"9"},{"size":500,"mtime":1611706133931,"results":"10","hashOfConfig":"9"},{"size":296,"mtime":1611706691944,"results":"11","hashOfConfig":"9"},{"size":1417,"mtime":1611754679255,"results":"12","hashOfConfig":"9"},{"size":1664,"mtime":1611742038647,"results":"13","hashOfConfig":"9"},{"size":1487,"mtime":1611753293384,"results":"14","hashOfConfig":"9"},{"size":425,"mtime":1611706133931,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x7a3iz",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/app/src/App.tsx",[],"/app/src/index.tsx",[],"/app/src/components/header/header.component.tsx",[],"/app/src/components/tasks/tasks.component.jsx",["31","32"],"/app/src/components/tasks/list.component.jsx",["33","34","35"],"import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport Table from 'react-bootstrap/Table'\nimport { FaCheckCircle, FaTrashAlt } from 'react-icons/fa'\n\nconst deleteTask = async (task, loadTasks) => {\n  if (window.confirm(`Are you sure you want to delete: \"${task.title}\"`)) {\n    await fetch(`http://localhost:3001/tasks/${task.id}`, {method: 'DELETE'});\n    loadTasks();\n  }\n}\n\nconst checkTask = async (task, loadTasks) => {\n  let form = { 'task': { 'done': 'true' } }\n  await fetch(`http://localhost:3001/tasks/${task.id}`, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(form)\n  })\n  loadTasks();\n}\n\nexport const ListComponent = ({ tasks, loadTasks }) => {\n  return (\n    <div>\n      <Card>\n        <Card.Body>\n          <Table responsive>\n            <tbody>\n              {tasks.map((task, i) => {\n                return <tr key={task.id}>\n                  <td className=\"col-md-10\">{task.title}</td>\n                  <td>\n                    {\n                      task.done == false ? \n                      <a className=\"check\" href=\"#\" onClick={() => checkTask(task, loadTasks)}>\n                        <FaCheckCircle />\n                      </a> : null\n                    }\n                  </td>\n                  <td>\n                    <a className=\"delete\" href=\"#\" onClick={() => deleteTask(task, loadTasks)}>\n                      <FaTrashAlt />\n                    </a>\n                  </td>\n                </tr>\n              })}\n            </tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    </div>\n  )\n}\n","/app/src/components/tasks/create-task.component.jsx",[],"/app/src/reportWebVitals.ts",[],{"ruleId":"36","severity":1,"message":"37","line":33,"column":104,"nodeType":"38","messageId":"39","endLine":33,"endColumn":106},{"ruleId":"36","severity":1,"message":"40","line":38,"column":104,"nodeType":"38","messageId":"39","endLine":38,"endColumn":106},{"ruleId":"36","severity":1,"message":"40","line":38,"column":33,"nodeType":"38","messageId":"39","endLine":38,"endColumn":35},{"ruleId":"41","severity":1,"message":"42","line":39,"column":23,"nodeType":"43","endLine":39,"endColumn":96},{"ruleId":"41","severity":1,"message":"42","line":45,"column":21,"nodeType":"43","endLine":45,"endColumn":96},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]